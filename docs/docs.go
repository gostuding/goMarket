// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "mag-nat1@yandex.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/balance": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Баланс пользователя"
                ],
                "summary": "Запрос баланса пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Баланс пользователя",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        },
        "/user/balance/withdraw": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Списание баллов"
                ],
                "summary": "Запрос на списание баллов в счёт другого заказа",
                "parameters": [
                    {
                        "description": "Номер заказа в счет которого списываются баллы",
                        "name": "withdraw",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.Withdraw"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Токен авторизации",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Списание успешно добавлено"
                    },
                    "400": {
                        "description": "Ошибка в теле запроса. Тело запроса не соответствует формату json"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "402": {
                        "description": "Недостаточно средств"
                    },
                    "409": {
                        "description": "Заказ уже был зарегистрирован ранее"
                    },
                    "422": {
                        "description": "Номер заказа не прошёл проверку подлинности"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Авторизация"
                ],
                "summary": "Авторизация пользователя в микросервисе",
                "parameters": [
                    {
                        "description": "Логи и пароль пользователя в формате json",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoginPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "headers": {
                            "Authorization": {
                                "type": "string",
                                "description": "Токен авторизации"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка в теле запроса. Тело запроса не соответствует json формату"
                    },
                    "401": {
                        "description": "Логин или пароль не найден"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        },
        "/user/orders": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Заказы"
                ],
                "summary": "Запрос списка заказов, зарегистрированных за пользователем",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список зарегистрированных за пользователем заказов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Orders"
                            }
                        }
                    },
                    "204": {
                        "description": "Нет данных для ответа"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Заказы"
                ],
                "summary": "Добавление номера заказа пользователя",
                "parameters": [
                    {
                        "description": "Номер заказа",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Токен авторизации",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Заказ уже был добавлен пользователем ранее"
                    },
                    "202": {
                        "description": "Заказ успешно зарегистрирован за пользователем"
                    },
                    "400": {
                        "description": "Ошибка в теле запроса. Тело запроса пустое"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "409": {
                        "description": "Заказ зарегистрирован за другим пользователем"
                    },
                    "422": {
                        "description": "Номер заказа не прошёл проверку подлинности"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Авторизация"
                ],
                "summary": "Регистрация нового пользователя в микросервисе",
                "parameters": [
                    {
                        "description": "Логи и пароль пользователя в формате json",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoginPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная регистрация пользователя",
                        "headers": {
                            "Authorization": {
                                "type": "string",
                                "description": "Токен авторизации"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка в теле запроса. Тело запроса не соответствует json формату"
                    },
                    "409": {
                        "description": "Такой логин уже используется другим пользователем"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        },
        "/user/withdrawals": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Списание баллов"
                ],
                "summary": "Запрос списка списаний баллов",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Токен авторизации",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список списаний",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.Withdraws"
                            }
                        }
                    },
                    "204": {
                        "description": "Нет данных для ответа"
                    },
                    "401": {
                        "description": "Пользователь не авторизован"
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервиса"
                    }
                }
            }
        }
    },
    "definitions": {
        "server.LoginPassword": {
            "description": "Модель для отправки логина и пароля пользователя",
            "type": "object",
            "properties": {
                "login": {
                    "description": "Логин пользователя",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль пользователя",
                    "type": "string"
                }
            }
        },
        "server.Withdraw": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                },
                "sum": {
                    "type": "number"
                }
            }
        },
        "storage.Orders": {
            "type": "object",
            "properties": {
                "accrual": {
                    "type": "number"
                },
                "number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uploaded_at": {
                    "type": "string"
                }
            }
        },
        "storage.Withdraws": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "string"
                },
                "processed_at": {
                    "type": "string"
                },
                "sum": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Gophermart API",
	Description:      "API для микросервиса накопительной системы лояльности «Гофермарт»",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
